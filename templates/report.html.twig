{% extends "base.html.twig" %}

{% block title %}About{% endblock %}

{% block content %}

<h1 class="arubrik">Report</h1>

<h2 class="brubrik">Kmom01</h2>
<p class="reporttext">Inga större kunskaper inom objektorientering utöver det som vi till exempel fick lära oss i den objektorienterade Python-klassen.</p>

<p class="reporttext">Klasser används för att skapa objekt och ska enligt kodstandard sparas i filer som börjar med stor bokstav. Attributen i en klass kan vara antingen publika eller privata. Ett public attribut kan man nå och göra ändringar i medan ett privat attribut måste hämtas eller ändras via Getter och Setter.</p>

<p class="reporttext">Jag tycker att upplägget än så länge påminner om det vi tidigare gjort. Jag läste i chatten på discord att tanken var att man skulle kombinera eller knyta samman det som man lärt sig i databas-, design- och webtec-kursen och det är väl därifrån jag liksom känner igen en del delar samt strukturen.</p>

<p class="reporttext">I PHP The Right Way så tyckte jag framöverallt om avsnittet om errors och exception och jag gillar även funktionen i Symfony där man kan skriva bin/console debug:router och få se de eventuella problem som finns. Jag tycker att det varit relativt enkelt att förstå samt lösa de problem som dök upp på vägens gång. I artikeln stod det även att debug eller dev mode i Symfony "display a nice and clean stack trace" och det håller jag med om och som sagt så tycker jag att det var väldigt användbart.</p>

<h2 class="brubrik">Kmom02</h2>
<p class="reporttext">Arv innebär att en klass ärver metoder och attribut från en annan klass, detta fungerar till exempel när två klasser är lika varandra eller där man har en grundklass som sedan ska/kan byggas ut i olika riktningar. Den nya klasen kan då ärva grunderna och sedan bygger man vidare på den eller skriver över de befintliga metoderna/attributen. Ett exempel skulle kunna vara om man har en klass för fordon där man sedan skapar en klass för bilar och en för motorcyklar. De nya klasserna kan då ärva det som finns i fordonsklassen men sedan skilja sig åt, till exempel gällande hur många däck de har.</p>
<p class="reporttext">Komposition innebär att det finns ett "har-en"-relation, vilket betyder att ett objekt består av andra objekt. Ett exempel kan vara objektet Hus som består av objekten Rum.</p>
<p class="reporttext">Interface innehåller själv ingen kod utan fungerar som ett kontrakt som lovar klassen att ett API kommer att erbjudas vilket motsvaras av interfacet. Trait kan användas för att ytterligare uttöka metoder och variabler, detta då php inte stödjer multipelt arv och används alltså när något ska ärvas från flera olika basklasser.</p>

<p class="reporttext">Jag tycker att uppgiften var väldigt rörig och ibland förvirrande, dock tycker jag att det blev lättare på slutet när man kommit till API-delen. Det som gjorde det rörigt var att inte alla delar som stod i uppgiften skulle göras till detta kmom utan att den delades upp till nästa kursmoment också. Den här uppgiften kändes även väldigt stor så jag förstår att man delade upp den men tycker som sagt att det också gjorde det rörigt. Jag är nu i slutändan helt okej nöjd men jag hade sådana problem med att mina routes slutade fungera samt vissa andra konstiga saker som slutade fungera emellanåt, vilket skedde flera gånger. När man låtit allting vila ett tag så fungerade det sen igen och jag fattade verligen inte varför det blev så. Jag vet inte helt säkert om jag fortfarande vet varför men jag testade tillslut att rensa cache och cookies i webbläsaren och då löste det en del av gångerna. Hade ju dock underlättat om jag tänkt på det tidigare så hade tid kunnat sparats in. Min kod skulle jag nog säga är långt ifrån perfekt, jag tror garanterat att jag skulle kunna använda mig av bättre strukturer och delat upp koden i fler olika klasser och liknande. Utöver rörigheten så tycker jag att det här var ett väldigt intressant och lärorikt kursmoment och jag tycker att det varit en bra inblick i hur klasser kan hänga ihop, ärva ifrån varandra och så vidare!</p>

<h2 class="brubrik">Kmom03</h2>
<p class="reporttext"></p>

<h2 class="brubrik">Kmom04</h2>
<p class="reporttext"></p>

<h2 class="brubrik">Kmom05</h2>
<p class="reporttext"></p>

<h2 class="brubrik">Kmom06</h2>
<p class="reporttext"></p>

<h2 class="brubrik">Kmom07/10</h2>
<p class="reporttext"></p>
</div>

{% endblock %}
